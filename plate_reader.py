from pathlib import Path
import itertools
from typing import List, Dict, Union
import pandas
import argparse

BlockDict = Dict[str, Union[str, List[str]]]

parser = argparse.ArgumentParser()

parser.add_argument(
	'-i', '--input',
	help = 'The output file generated by the plate reader.',
	action = 'store',
	dest = 'filename'
)

parser.add_argument(
	'-o', '--output',
	help = 'The output filename. If it is a folder, or the output not given, the new table will be saved with the same filename as the original file.',
	action = 'store',
	dest = 'output',
	default = None
)


def parse_time_block(block: List[str]) -> List[BlockDict]:
	timepoint = block[0][0]
	temperature = block[0][1]
	wells = list()
	for row_label, line in zip('ABCDEFGH', block):
		for col_label, value in zip(range(1, 13), line[3:]):
			row = {
				'time':        timepoint,
				'temperature': temperature,
				'row':         row_label,
				'column':      col_label,
				'value':       value
			}
			wells.append(row)
	return wells


def extract_time_blocks(contents: List[List[str]]) -> List[List[str]]:
	""" Splits the contents of the file into separate timeblocks."""
	blocks = list()
	while True:
		block = list(itertools.takewhile(lambda s: any(i != '' for i in s), contents))

		if '~End' in itertools.chain.from_iterable(block):
			break
		blocks.append(block)
		contents = contents[len(block) + 1:]
	return blocks


def save_table(table: List[Dict[str, str]], output_filename) -> None:
	""" Saves the table."""
	df = pandas.DataFrame(table, columns = ['time', 'temperature', 'row', 'column', 'value'])
	if output_filename.suffix == '.xlsx':
		df.to_excel(str(output_filename))
	else:
		if output_filename.suffix == '.csv':
			ext = ','
		else:
			ext = '\t'
		df.to_csv(str(output_filename), sep = ext, index = False)


def parse_plate_reader(filename: Union[str, Path], output_filename: Path = None):
	""" Parses the output of the plate reader."""
	filename = Path(filename)
	if output_filename is None:
		output_filename = filename.with_suffix('.table' + filename.suffix)
	elif output_filename.is_dir():
		output_filename = output_filename / (filename.stem + '.tsv')

	contents = [i.split("\t") for i in filename.read_text('iso-8859-15').split("\n")][3:]

	blocks = extract_time_blocks(contents)

	table = list(itertools.chain.from_iterable(parse_time_block(block) for block in blocks))

	save_table(table, output_filename)


if __name__ == "__main__":

	args = parser.parse_args()
	path = args.filename
	output_filename = args.output
	if path is None:
		path = Path.home() / "Downloads" / "growth curve 4.txt"
		output_filename = None
	parse_plate_reader(path, output_filename)
